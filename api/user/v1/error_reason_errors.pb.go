// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 用户未找到
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

// 用户未找到
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 用户已存在
func IsUserExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_EXISTS.String() && e.Code == 409
}

// 用户已存在
func ErrorUserExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_USER_EXISTS.String(), fmt.Sprintf(format, args...))
}

// 密码错误
func IsInvalidPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_PASSWORD.String() && e.Code == 401
}

// 密码错误
func ErrorInvalidPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_INVALID_PASSWORD.String(), fmt.Sprintf(format, args...))
}

// 无效的邮箱格式
func IsInvalidEmail(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_EMAIL.String() && e.Code == 400
}

// 无效的邮箱格式
func ErrorInvalidEmail(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVALID_EMAIL.String(), fmt.Sprintf(format, args...))
}

// 无效的token
func IsInvalidToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_TOKEN.String() && e.Code == 401
}

// 无效的token
func ErrorInvalidToken(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_INVALID_TOKEN.String(), fmt.Sprintf(format, args...))
}
