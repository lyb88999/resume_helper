// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: backend/shared/proto/resume/resume.proto

package resume

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResumeParserService_UploadResume_FullMethodName   = "/resume.v1.ResumeParserService/UploadResume"
	ResumeParserService_ParseResume_FullMethodName    = "/resume.v1.ResumeParserService/ParseResume"
	ResumeParserService_GetParseResult_FullMethodName = "/resume.v1.ResumeParserService/GetParseResult"
	ResumeParserService_ListResumes_FullMethodName    = "/resume.v1.ResumeParserService/ListResumes"
	ResumeParserService_DeleteResume_FullMethodName   = "/resume.v1.ResumeParserService/DeleteResume"
)

// ResumeParserServiceClient is the client API for ResumeParserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 简历解析服务
type ResumeParserServiceClient interface {
	// 上传简历
	UploadResume(ctx context.Context, in *UploadResumeRequest, opts ...grpc.CallOption) (*UploadResumeResponse, error)
	// 解析简历
	ParseResume(ctx context.Context, in *ParseResumeRequest, opts ...grpc.CallOption) (*ParseResumeResponse, error)
	// 获取解析结果
	GetParseResult(ctx context.Context, in *GetParseResultRequest, opts ...grpc.CallOption) (*GetParseResultResponse, error)
	// 获取简历列表
	ListResumes(ctx context.Context, in *ListResumesRequest, opts ...grpc.CallOption) (*ListResumesResponse, error)
	// 删除简历
	DeleteResume(ctx context.Context, in *DeleteResumeRequest, opts ...grpc.CallOption) (*DeleteResumeResponse, error)
}

type resumeParserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResumeParserServiceClient(cc grpc.ClientConnInterface) ResumeParserServiceClient {
	return &resumeParserServiceClient{cc}
}

func (c *resumeParserServiceClient) UploadResume(ctx context.Context, in *UploadResumeRequest, opts ...grpc.CallOption) (*UploadResumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadResumeResponse)
	err := c.cc.Invoke(ctx, ResumeParserService_UploadResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeParserServiceClient) ParseResume(ctx context.Context, in *ParseResumeRequest, opts ...grpc.CallOption) (*ParseResumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseResumeResponse)
	err := c.cc.Invoke(ctx, ResumeParserService_ParseResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeParserServiceClient) GetParseResult(ctx context.Context, in *GetParseResultRequest, opts ...grpc.CallOption) (*GetParseResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParseResultResponse)
	err := c.cc.Invoke(ctx, ResumeParserService_GetParseResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeParserServiceClient) ListResumes(ctx context.Context, in *ListResumesRequest, opts ...grpc.CallOption) (*ListResumesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResumesResponse)
	err := c.cc.Invoke(ctx, ResumeParserService_ListResumes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeParserServiceClient) DeleteResume(ctx context.Context, in *DeleteResumeRequest, opts ...grpc.CallOption) (*DeleteResumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResumeResponse)
	err := c.cc.Invoke(ctx, ResumeParserService_DeleteResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResumeParserServiceServer is the server API for ResumeParserService service.
// All implementations must embed UnimplementedResumeParserServiceServer
// for forward compatibility.
//
// 简历解析服务
type ResumeParserServiceServer interface {
	// 上传简历
	UploadResume(context.Context, *UploadResumeRequest) (*UploadResumeResponse, error)
	// 解析简历
	ParseResume(context.Context, *ParseResumeRequest) (*ParseResumeResponse, error)
	// 获取解析结果
	GetParseResult(context.Context, *GetParseResultRequest) (*GetParseResultResponse, error)
	// 获取简历列表
	ListResumes(context.Context, *ListResumesRequest) (*ListResumesResponse, error)
	// 删除简历
	DeleteResume(context.Context, *DeleteResumeRequest) (*DeleteResumeResponse, error)
	mustEmbedUnimplementedResumeParserServiceServer()
}

// UnimplementedResumeParserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResumeParserServiceServer struct{}

func (UnimplementedResumeParserServiceServer) UploadResume(context.Context, *UploadResumeRequest) (*UploadResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadResume not implemented")
}
func (UnimplementedResumeParserServiceServer) ParseResume(context.Context, *ParseResumeRequest) (*ParseResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseResume not implemented")
}
func (UnimplementedResumeParserServiceServer) GetParseResult(context.Context, *GetParseResultRequest) (*GetParseResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParseResult not implemented")
}
func (UnimplementedResumeParserServiceServer) ListResumes(context.Context, *ListResumesRequest) (*ListResumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResumes not implemented")
}
func (UnimplementedResumeParserServiceServer) DeleteResume(context.Context, *DeleteResumeRequest) (*DeleteResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResume not implemented")
}
func (UnimplementedResumeParserServiceServer) mustEmbedUnimplementedResumeParserServiceServer() {}
func (UnimplementedResumeParserServiceServer) testEmbeddedByValue()                             {}

// UnsafeResumeParserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResumeParserServiceServer will
// result in compilation errors.
type UnsafeResumeParserServiceServer interface {
	mustEmbedUnimplementedResumeParserServiceServer()
}

func RegisterResumeParserServiceServer(s grpc.ServiceRegistrar, srv ResumeParserServiceServer) {
	// If the following call pancis, it indicates UnimplementedResumeParserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResumeParserService_ServiceDesc, srv)
}

func _ResumeParserService_UploadResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeParserServiceServer).UploadResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeParserService_UploadResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeParserServiceServer).UploadResume(ctx, req.(*UploadResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeParserService_ParseResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeParserServiceServer).ParseResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeParserService_ParseResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeParserServiceServer).ParseResume(ctx, req.(*ParseResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeParserService_GetParseResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParseResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeParserServiceServer).GetParseResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeParserService_GetParseResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeParserServiceServer).GetParseResult(ctx, req.(*GetParseResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeParserService_ListResumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeParserServiceServer).ListResumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeParserService_ListResumes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeParserServiceServer).ListResumes(ctx, req.(*ListResumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeParserService_DeleteResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeParserServiceServer).DeleteResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeParserService_DeleteResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeParserServiceServer).DeleteResume(ctx, req.(*DeleteResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResumeParserService_ServiceDesc is the grpc.ServiceDesc for ResumeParserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResumeParserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resume.v1.ResumeParserService",
	HandlerType: (*ResumeParserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadResume",
			Handler:    _ResumeParserService_UploadResume_Handler,
		},
		{
			MethodName: "ParseResume",
			Handler:    _ResumeParserService_ParseResume_Handler,
		},
		{
			MethodName: "GetParseResult",
			Handler:    _ResumeParserService_GetParseResult_Handler,
		},
		{
			MethodName: "ListResumes",
			Handler:    _ResumeParserService_ListResumes_Handler,
		},
		{
			MethodName: "DeleteResume",
			Handler:    _ResumeParserService_DeleteResume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/shared/proto/resume/resume.proto",
}

const (
	AIAnalysisService_AnalyzeResume_FullMethodName       = "/resume.v1.AIAnalysisService/AnalyzeResume"
	AIAnalysisService_GenerateSuggestions_FullMethodName = "/resume.v1.AIAnalysisService/GenerateSuggestions"
	AIAnalysisService_GetAnalysisResult_FullMethodName   = "/resume.v1.AIAnalysisService/GetAnalysisResult"
)

// AIAnalysisServiceClient is the client API for AIAnalysisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AI分析服务
type AIAnalysisServiceClient interface {
	// 分析简历
	AnalyzeResume(ctx context.Context, in *AnalyzeResumeRequest, opts ...grpc.CallOption) (*AnalyzeResumeResponse, error)
	// 生成优化建议
	GenerateSuggestions(ctx context.Context, in *GenerateSuggestionsRequest, opts ...grpc.CallOption) (*GenerateSuggestionsResponse, error)
	// 获取分析结果
	GetAnalysisResult(ctx context.Context, in *GetAnalysisResultRequest, opts ...grpc.CallOption) (*GetAnalysisResultResponse, error)
}

type aIAnalysisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIAnalysisServiceClient(cc grpc.ClientConnInterface) AIAnalysisServiceClient {
	return &aIAnalysisServiceClient{cc}
}

func (c *aIAnalysisServiceClient) AnalyzeResume(ctx context.Context, in *AnalyzeResumeRequest, opts ...grpc.CallOption) (*AnalyzeResumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeResumeResponse)
	err := c.cc.Invoke(ctx, AIAnalysisService_AnalyzeResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIAnalysisServiceClient) GenerateSuggestions(ctx context.Context, in *GenerateSuggestionsRequest, opts ...grpc.CallOption) (*GenerateSuggestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateSuggestionsResponse)
	err := c.cc.Invoke(ctx, AIAnalysisService_GenerateSuggestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIAnalysisServiceClient) GetAnalysisResult(ctx context.Context, in *GetAnalysisResultRequest, opts ...grpc.CallOption) (*GetAnalysisResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAnalysisResultResponse)
	err := c.cc.Invoke(ctx, AIAnalysisService_GetAnalysisResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIAnalysisServiceServer is the server API for AIAnalysisService service.
// All implementations must embed UnimplementedAIAnalysisServiceServer
// for forward compatibility.
//
// AI分析服务
type AIAnalysisServiceServer interface {
	// 分析简历
	AnalyzeResume(context.Context, *AnalyzeResumeRequest) (*AnalyzeResumeResponse, error)
	// 生成优化建议
	GenerateSuggestions(context.Context, *GenerateSuggestionsRequest) (*GenerateSuggestionsResponse, error)
	// 获取分析结果
	GetAnalysisResult(context.Context, *GetAnalysisResultRequest) (*GetAnalysisResultResponse, error)
	mustEmbedUnimplementedAIAnalysisServiceServer()
}

// UnimplementedAIAnalysisServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIAnalysisServiceServer struct{}

func (UnimplementedAIAnalysisServiceServer) AnalyzeResume(context.Context, *AnalyzeResumeRequest) (*AnalyzeResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeResume not implemented")
}
func (UnimplementedAIAnalysisServiceServer) GenerateSuggestions(context.Context, *GenerateSuggestionsRequest) (*GenerateSuggestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSuggestions not implemented")
}
func (UnimplementedAIAnalysisServiceServer) GetAnalysisResult(context.Context, *GetAnalysisResultRequest) (*GetAnalysisResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalysisResult not implemented")
}
func (UnimplementedAIAnalysisServiceServer) mustEmbedUnimplementedAIAnalysisServiceServer() {}
func (UnimplementedAIAnalysisServiceServer) testEmbeddedByValue()                           {}

// UnsafeAIAnalysisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIAnalysisServiceServer will
// result in compilation errors.
type UnsafeAIAnalysisServiceServer interface {
	mustEmbedUnimplementedAIAnalysisServiceServer()
}

func RegisterAIAnalysisServiceServer(s grpc.ServiceRegistrar, srv AIAnalysisServiceServer) {
	// If the following call pancis, it indicates UnimplementedAIAnalysisServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIAnalysisService_ServiceDesc, srv)
}

func _AIAnalysisService_AnalyzeResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIAnalysisServiceServer).AnalyzeResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIAnalysisService_AnalyzeResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIAnalysisServiceServer).AnalyzeResume(ctx, req.(*AnalyzeResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIAnalysisService_GenerateSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIAnalysisServiceServer).GenerateSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIAnalysisService_GenerateSuggestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIAnalysisServiceServer).GenerateSuggestions(ctx, req.(*GenerateSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIAnalysisService_GetAnalysisResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalysisResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIAnalysisServiceServer).GetAnalysisResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIAnalysisService_GetAnalysisResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIAnalysisServiceServer).GetAnalysisResult(ctx, req.(*GetAnalysisResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIAnalysisService_ServiceDesc is the grpc.ServiceDesc for AIAnalysisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIAnalysisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resume.v1.AIAnalysisService",
	HandlerType: (*AIAnalysisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzeResume",
			Handler:    _AIAnalysisService_AnalyzeResume_Handler,
		},
		{
			MethodName: "GenerateSuggestions",
			Handler:    _AIAnalysisService_GenerateSuggestions_Handler,
		},
		{
			MethodName: "GetAnalysisResult",
			Handler:    _AIAnalysisService_GetAnalysisResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/shared/proto/resume/resume.proto",
}
