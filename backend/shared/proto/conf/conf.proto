syntax = "proto3";
package kratos.api;

// 关键改动：go_package 路径指向共享目录，并用分号明确指定包名为 conf
option go_package = "github.com/lyb88999/resume_helper/backend/shared/proto/conf;conf";

import "google/protobuf/duration.proto";

// 包含了所有微服务配置项的统一引导结构
message Bootstrap {
  Server server = 1;
  Data data = 2;
  Registry registry = 3;
  Auth auth = 4;         // 来自 user-service 的配置
  Storage storage = 5;   // 来自 file-service 的配置
  Parser parser = 6;     // 来自 parser-service 的配置
  AI ai = 7;             // 来自 ai-service 的配置
}

// 通用服务配置
message Server {
  message HTTP {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  message GRPC {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  HTTP http = 1;
  GRPC grpc = 2;
}

// 通用数据源配置
message Data {
  message Database {
    string driver = 1;
    string source = 2;
  }
  message Redis {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration read_timeout = 3;
    google.protobuf.Duration write_timeout = 4;
  }
  Database database = 1;
  Redis redis = 2;
}

// 通用服务注册配置
message Registry {
  message Consul {
    string address = 1;
    string scheme = 2;
  }
  Consul consul = 1;
}

// --- 以下为各个微服务专属的配置消息定义 ---

// Auth - 来自 user-service 的配置
message Auth {
  string jwt_secret = 1;
  google.protobuf.Duration jwt_expire = 2;
}

// Storage - 来自 file-service 的配置
message Storage {
  message Local {
    string path = 1;
  }
  message MinIO {
    string endpoint = 1;
    string access_key = 2;
    string secret_key = 3;
    string bucket = 4;
    bool secure = 5;
  }
  string type = 1; // local, minio
  Local local = 2;
  MinIO minio = 3;
  int64 max_file_size = 4;
  repeated string allowed_types = 5;
}

// Parser - 来自 parser-service 的配置
message Parser {
  FileConfig file = 1;
  map<string, ParserConfig> parsers = 2;
  TaskConfig task = 3;
}

message FileConfig {
  int64 max_file_size = 1;
  repeated string allowed_types = 2;
  string temp_dir = 3;
  int32 cleanup_interval = 4;
}

message ParserConfig {
  bool enabled = 1;
  map<string, string> options = 2;
}

message TaskConfig {
  int32 max_concurrent = 1;
  int32 timeout_seconds = 2;
  int32 retry_count = 3;
  string queue_name = 4;
}

// AI - 来自 ai-service 的配置
message AI {
  ModelConfig model = 1;
  EmbeddingConfig embedding = 2;
  EinoConfig eino = 3;
  VectorConfig vector = 4;
}

message ModelConfig {
  string provider = 1;
  string api_key = 2;
  string base_url = 3;
  string model_name = 4;
  int32 max_tokens = 5;
  float temperature = 6;
  int32 timeout_seconds = 7;
}

message EmbeddingConfig {
  string provider = 1;
  string api_key = 2;
  string base_url = 3;
  string model_name = 4;
  int32 dimension = 5;
}

message EinoConfig {
  bool enable_tracing = 1;
  bool enable_caching = 2;
  int32 max_concurrent = 3;
  string log_level = 4;
}

message VectorConfig {
  string provider = 1;
  string address = 2;
  string collection_name = 3;
  int32 dimension = 4;
  float similarity_threshold = 5;
}