syntax = "proto3";
package kratos.api;

option go_package = "github.com/lyb88999/resume_helper/backend/shared/proto/conf;conf";
import "google/protobuf/duration.proto";

message Bootstrap {
  Server server = 1;
  Data data = 2;
  Registry registry = 3;
  AI ai = 4;
}

message Server {
  message HTTP {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  message GRPC {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration timeout = 3;
  }
  HTTP http = 1;
  GRPC grpc = 2;
}

message Data {
  message Database {
    string driver = 1;
    string source = 2;
  }
  message Redis {
    string network = 1;
    string addr = 2;
    google.protobuf.Duration read_timeout = 3;
    google.protobuf.Duration write_timeout = 4;
  }
  Database database = 1;
  Redis redis = 2;
}

// 服务注册配置
message Registry {
  Consul consul = 1;
}

message Consul {
  string address = 1;
  string scheme = 2;
}

// AI服务配置
message AI {
  // 模型配置
  ModelConfig model = 1;

  // Embedding配置
  EmbeddingConfig embedding = 2;

  // Eino框架配置
  EinoConfig eino = 3;

  // 向量数据库配置
  VectorConfig vector = 4;
}

message ModelConfig {
  string provider = 1;           // 模型提供商: ark, openai, claude, etc.
  string api_key = 2;           // API密钥
  string base_url = 3;          // API地址
  string model_name = 4;        // 模型名称
  int32 max_tokens = 5;         // 最大token数
  float temperature = 6;        // 温度参数
  int32 timeout_seconds = 7;    // 超时时间
}

message EmbeddingConfig {
  string provider = 1;          // Embedding提供商: ark, openai, etc.
  string api_key = 2;          // API密钥
  string base_url = 3;         // API地址
  string model_name = 4;       // 模型名称
  int32 dimension = 5;         // 向量维度
}

message EinoConfig {
  bool enable_tracing = 1;      // 启用链路追踪
  bool enable_caching = 2;      // 启用缓存
  int32 max_concurrent = 3;     // 最大并发数
  string log_level = 4;         // 日志级别
}

message VectorConfig {
  string provider = 1;          // 向量数据库提供商: milvus, pinecone, etc.
  string address = 2;           // 数据库地址
  string collection_name = 3;   // 集合名称
  int32 dimension = 4;          // 向量维度
  float similarity_threshold = 5; // 相似度阈值
}