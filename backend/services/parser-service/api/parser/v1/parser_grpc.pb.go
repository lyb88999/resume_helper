// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: backend/services/parser-service/api/parser/v1/parser.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ParserService_ParseDocument_FullMethodName  = "/api.parser.v1.ParserService/ParseDocument"
	ParserService_GetParseStatus_FullMethodName = "/api.parser.v1.ParserService/GetParseStatus"
	ParserService_Health_FullMethodName         = "/api.parser.v1.ParserService/Health"
)

// ParserServiceClient is the client API for ParserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 解析服务
type ParserServiceClient interface {
	// 解析文档
	ParseDocument(ctx context.Context, in *ParseDocumentRequest, opts ...grpc.CallOption) (*ParseDocumentReply, error)
	// 获取解析状态
	GetParseStatus(ctx context.Context, in *GetParseStatusRequest, opts ...grpc.CallOption) (*GetParseStatusReply, error)
	// 健康检查
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthReply, error)
}

type parserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParserServiceClient(cc grpc.ClientConnInterface) ParserServiceClient {
	return &parserServiceClient{cc}
}

func (c *parserServiceClient) ParseDocument(ctx context.Context, in *ParseDocumentRequest, opts ...grpc.CallOption) (*ParseDocumentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParseDocumentReply)
	err := c.cc.Invoke(ctx, ParserService_ParseDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parserServiceClient) GetParseStatus(ctx context.Context, in *GetParseStatusRequest, opts ...grpc.CallOption) (*GetParseStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetParseStatusReply)
	err := c.cc.Invoke(ctx, ParserService_GetParseStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parserServiceClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthReply)
	err := c.cc.Invoke(ctx, ParserService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParserServiceServer is the server API for ParserService service.
// All implementations must embed UnimplementedParserServiceServer
// for forward compatibility.
//
// 解析服务
type ParserServiceServer interface {
	// 解析文档
	ParseDocument(context.Context, *ParseDocumentRequest) (*ParseDocumentReply, error)
	// 获取解析状态
	GetParseStatus(context.Context, *GetParseStatusRequest) (*GetParseStatusReply, error)
	// 健康检查
	Health(context.Context, *HealthRequest) (*HealthReply, error)
	mustEmbedUnimplementedParserServiceServer()
}

// UnimplementedParserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedParserServiceServer struct{}

func (UnimplementedParserServiceServer) ParseDocument(context.Context, *ParseDocumentRequest) (*ParseDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseDocument not implemented")
}
func (UnimplementedParserServiceServer) GetParseStatus(context.Context, *GetParseStatusRequest) (*GetParseStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParseStatus not implemented")
}
func (UnimplementedParserServiceServer) Health(context.Context, *HealthRequest) (*HealthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedParserServiceServer) mustEmbedUnimplementedParserServiceServer() {}
func (UnimplementedParserServiceServer) testEmbeddedByValue()                       {}

// UnsafeParserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParserServiceServer will
// result in compilation errors.
type UnsafeParserServiceServer interface {
	mustEmbedUnimplementedParserServiceServer()
}

func RegisterParserServiceServer(s grpc.ServiceRegistrar, srv ParserServiceServer) {
	// If the following call pancis, it indicates UnimplementedParserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ParserService_ServiceDesc, srv)
}

func _ParserService_ParseDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParserServiceServer).ParseDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParserService_ParseDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParserServiceServer).ParseDocument(ctx, req.(*ParseDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParserService_GetParseStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParseStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParserServiceServer).GetParseStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParserService_GetParseStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParserServiceServer).GetParseStatus(ctx, req.(*GetParseStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParserService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParserServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParserService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParserServiceServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParserService_ServiceDesc is the grpc.ServiceDesc for ParserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.parser.v1.ParserService",
	HandlerType: (*ParserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseDocument",
			Handler:    _ParserService_ParseDocument_Handler,
		},
		{
			MethodName: "GetParseStatus",
			Handler:    _ParserService_GetParseStatus_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _ParserService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/services/parser-service/api/parser/v1/parser.proto",
}
