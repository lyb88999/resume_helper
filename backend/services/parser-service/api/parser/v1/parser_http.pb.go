// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.27.3
// source: parser/v1/parser.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationParserServiceGetParseStatus = "/api.parser.v1.ParserService/GetParseStatus"
const OperationParserServiceHealth = "/api.parser.v1.ParserService/Health"
const OperationParserServiceParseDocument = "/api.parser.v1.ParserService/ParseDocument"

type ParserServiceHTTPServer interface {
	// GetParseStatus 获取解析状态
	GetParseStatus(context.Context, *GetParseStatusRequest) (*GetParseStatusReply, error)
	// Health 健康检查
	Health(context.Context, *HealthRequest) (*HealthReply, error)
	// ParseDocument 解析文档
	ParseDocument(context.Context, *ParseDocumentRequest) (*ParseDocumentReply, error)
}

func RegisterParserServiceHTTPServer(s *http.Server, srv ParserServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/parser/parse", _ParserService_ParseDocument0_HTTP_Handler(srv))
	r.GET("/api/v1/parser/status/{task_id}", _ParserService_GetParseStatus0_HTTP_Handler(srv))
	r.GET("/health", _ParserService_Health0_HTTP_Handler(srv))
}

func _ParserService_ParseDocument0_HTTP_Handler(srv ParserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ParseDocumentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationParserServiceParseDocument)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ParseDocument(ctx, req.(*ParseDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ParseDocumentReply)
		return ctx.Result(200, reply)
	}
}

func _ParserService_GetParseStatus0_HTTP_Handler(srv ParserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetParseStatusRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationParserServiceGetParseStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetParseStatus(ctx, req.(*GetParseStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetParseStatusReply)
		return ctx.Result(200, reply)
	}
}

func _ParserService_Health0_HTTP_Handler(srv ParserServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HealthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationParserServiceHealth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Health(ctx, req.(*HealthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HealthReply)
		return ctx.Result(200, reply)
	}
}

type ParserServiceHTTPClient interface {
	GetParseStatus(ctx context.Context, req *GetParseStatusRequest, opts ...http.CallOption) (rsp *GetParseStatusReply, err error)
	Health(ctx context.Context, req *HealthRequest, opts ...http.CallOption) (rsp *HealthReply, err error)
	ParseDocument(ctx context.Context, req *ParseDocumentRequest, opts ...http.CallOption) (rsp *ParseDocumentReply, err error)
}

type ParserServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewParserServiceHTTPClient(client *http.Client) ParserServiceHTTPClient {
	return &ParserServiceHTTPClientImpl{client}
}

func (c *ParserServiceHTTPClientImpl) GetParseStatus(ctx context.Context, in *GetParseStatusRequest, opts ...http.CallOption) (*GetParseStatusReply, error) {
	var out GetParseStatusReply
	pattern := "/api/v1/parser/status/{task_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationParserServiceGetParseStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ParserServiceHTTPClientImpl) Health(ctx context.Context, in *HealthRequest, opts ...http.CallOption) (*HealthReply, error) {
	var out HealthReply
	pattern := "/health"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationParserServiceHealth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ParserServiceHTTPClientImpl) ParseDocument(ctx context.Context, in *ParseDocumentRequest, opts ...http.CallOption) (*ParseDocumentReply, error) {
	var out ParseDocumentReply
	pattern := "/api/v1/parser/parse"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationParserServiceParseDocument))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
