// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 文件不存在
func IsFileNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FILE_NOT_FOUND.String() && e.Code == 404
}

// 文件不存在
func ErrorFileNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_FILE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 不支持的文件格式
func IsUnsupportedFileType(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNSUPPORTED_FILE_TYPE.String() && e.Code == 400
}

// 不支持的文件格式
func ErrorUnsupportedFileType(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_UNSUPPORTED_FILE_TYPE.String(), fmt.Sprintf(format, args...))
}

// 文件损坏或无法读取
func IsFileCorrupted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FILE_CORRUPTED.String() && e.Code == 400
}

// 文件损坏或无法读取
func ErrorFileCorrupted(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_FILE_CORRUPTED.String(), fmt.Sprintf(format, args...))
}

// 解析失败
func IsParseFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PARSE_FAILED.String() && e.Code == 500
}

// 解析失败
func ErrorParseFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_PARSE_FAILED.String(), fmt.Sprintf(format, args...))
}

// 任务不存在
func IsTaskNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TASK_NOT_FOUND.String() && e.Code == 404
}

// 任务不存在
func ErrorTaskNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_TASK_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 任务正在处理中
func IsTaskProcessing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TASK_PROCESSING.String() && e.Code == 202
}

// 任务正在处理中
func ErrorTaskProcessing(format string, args ...interface{}) *errors.Error {
	return errors.New(202, ErrorReason_TASK_PROCESSING.String(), fmt.Sprintf(format, args...))
}

// 文件太大
func IsFileTooLarge(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FILE_TOO_LARGE.String() && e.Code == 413
}

// 文件太大
func ErrorFileTooLarge(format string, args ...interface{}) *errors.Error {
	return errors.New(413, ErrorReason_FILE_TOO_LARGE.String(), fmt.Sprintf(format, args...))
}

// 解析超时
func IsParseTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PARSE_TIMEOUT.String() && e.Code == 408
}

// 解析超时
func ErrorParseTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(408, ErrorReason_PARSE_TIMEOUT.String(), fmt.Sprintf(format, args...))
}

// 文档密码保护
func IsDocumentProtected(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DOCUMENT_PROTECTED.String() && e.Code == 400
}

// 文档密码保护
func ErrorDocumentProtected(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_DOCUMENT_PROTECTED.String(), fmt.Sprintf(format, args...))
}

// 内容为空
func IsEmptyContent(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_EMPTY_CONTENT.String() && e.Code == 400
}

// 内容为空
func ErrorEmptyContent(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_EMPTY_CONTENT.String(), fmt.Sprintf(format, args...))
}
