// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.27.3
// source: ai/v1/ai.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAIServiceAnalyzeResume = "/ai.v1.AIService/AnalyzeResume"
const OperationAIServiceChat = "/ai.v1.AIService/Chat"
const OperationAIServiceGenerateSuggestions = "/ai.v1.AIService/GenerateSuggestions"
const OperationAIServiceHealth = "/ai.v1.AIService/Health"
const OperationAIServiceRetrieveKnowledge = "/ai.v1.AIService/RetrieveKnowledge"

type AIServiceHTTPServer interface {
	// AnalyzeResume 分析简历
	AnalyzeResume(context.Context, *AnalyzeResumeRequest) (*AnalyzeResumeResponse, error)
	// Chat 智能问答
	Chat(context.Context, *ChatRequest) (*ChatResponse, error)
	// GenerateSuggestions 生成优化建议
	GenerateSuggestions(context.Context, *GenerateSuggestionsRequest) (*GenerateSuggestionsResponse, error)
	// Health 健康检查
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	// RetrieveKnowledge 知识检索
	RetrieveKnowledge(context.Context, *RetrieveKnowledgeRequest) (*RetrieveKnowledgeResponse, error)
}

func RegisterAIServiceHTTPServer(s *http.Server, srv AIServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/ai/analyze", _AIService_AnalyzeResume0_HTTP_Handler(srv))
	r.POST("/api/v1/ai/suggestions", _AIService_GenerateSuggestions0_HTTP_Handler(srv))
	r.POST("/api/v1/ai/chat", _AIService_Chat0_HTTP_Handler(srv))
	r.POST("/api/v1/ai/knowledge/retrieve", _AIService_RetrieveKnowledge0_HTTP_Handler(srv))
	r.GET("/api/v1/ai/health", _AIService_Health0_HTTP_Handler(srv))
}

func _AIService_AnalyzeResume0_HTTP_Handler(srv AIServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AnalyzeResumeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIServiceAnalyzeResume)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AnalyzeResume(ctx, req.(*AnalyzeResumeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AnalyzeResumeResponse)
		return ctx.Result(200, reply)
	}
}

func _AIService_GenerateSuggestions0_HTTP_Handler(srv AIServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GenerateSuggestionsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIServiceGenerateSuggestions)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenerateSuggestions(ctx, req.(*GenerateSuggestionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GenerateSuggestionsResponse)
		return ctx.Result(200, reply)
	}
}

func _AIService_Chat0_HTTP_Handler(srv AIServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChatRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIServiceChat)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Chat(ctx, req.(*ChatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChatResponse)
		return ctx.Result(200, reply)
	}
}

func _AIService_RetrieveKnowledge0_HTTP_Handler(srv AIServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RetrieveKnowledgeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIServiceRetrieveKnowledge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RetrieveKnowledge(ctx, req.(*RetrieveKnowledgeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RetrieveKnowledgeResponse)
		return ctx.Result(200, reply)
	}
}

func _AIService_Health0_HTTP_Handler(srv AIServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAIServiceHealth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Health(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HealthResponse)
		return ctx.Result(200, reply)
	}
}

type AIServiceHTTPClient interface {
	AnalyzeResume(ctx context.Context, req *AnalyzeResumeRequest, opts ...http.CallOption) (rsp *AnalyzeResumeResponse, err error)
	Chat(ctx context.Context, req *ChatRequest, opts ...http.CallOption) (rsp *ChatResponse, err error)
	GenerateSuggestions(ctx context.Context, req *GenerateSuggestionsRequest, opts ...http.CallOption) (rsp *GenerateSuggestionsResponse, err error)
	Health(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *HealthResponse, err error)
	RetrieveKnowledge(ctx context.Context, req *RetrieveKnowledgeRequest, opts ...http.CallOption) (rsp *RetrieveKnowledgeResponse, err error)
}

type AIServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAIServiceHTTPClient(client *http.Client) AIServiceHTTPClient {
	return &AIServiceHTTPClientImpl{client}
}

func (c *AIServiceHTTPClientImpl) AnalyzeResume(ctx context.Context, in *AnalyzeResumeRequest, opts ...http.CallOption) (*AnalyzeResumeResponse, error) {
	var out AnalyzeResumeResponse
	pattern := "/api/v1/ai/analyze"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAIServiceAnalyzeResume))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIServiceHTTPClientImpl) Chat(ctx context.Context, in *ChatRequest, opts ...http.CallOption) (*ChatResponse, error) {
	var out ChatResponse
	pattern := "/api/v1/ai/chat"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAIServiceChat))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIServiceHTTPClientImpl) GenerateSuggestions(ctx context.Context, in *GenerateSuggestionsRequest, opts ...http.CallOption) (*GenerateSuggestionsResponse, error) {
	var out GenerateSuggestionsResponse
	pattern := "/api/v1/ai/suggestions"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAIServiceGenerateSuggestions))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIServiceHTTPClientImpl) Health(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*HealthResponse, error) {
	var out HealthResponse
	pattern := "/api/v1/ai/health"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAIServiceHealth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AIServiceHTTPClientImpl) RetrieveKnowledge(ctx context.Context, in *RetrieveKnowledgeRequest, opts ...http.CallOption) (*RetrieveKnowledgeResponse, error) {
	var out RetrieveKnowledgeResponse
	pattern := "/api/v1/ai/knowledge/retrieve"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAIServiceRetrieveKnowledge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
