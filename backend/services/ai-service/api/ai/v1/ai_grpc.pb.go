// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: ai/v1/ai.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AIService_AnalyzeResume_FullMethodName       = "/ai.v1.AIService/AnalyzeResume"
	AIService_GenerateSuggestions_FullMethodName = "/ai.v1.AIService/GenerateSuggestions"
	AIService_Chat_FullMethodName                = "/ai.v1.AIService/Chat"
	AIService_RetrieveKnowledge_FullMethodName   = "/ai.v1.AIService/RetrieveKnowledge"
	AIService_Health_FullMethodName              = "/ai.v1.AIService/Health"
)

// AIServiceClient is the client API for AIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AI服务接口
type AIServiceClient interface {
	// 分析简历
	AnalyzeResume(ctx context.Context, in *AnalyzeResumeRequest, opts ...grpc.CallOption) (*AnalyzeResumeResponse, error)
	// 生成优化建议
	GenerateSuggestions(ctx context.Context, in *GenerateSuggestionsRequest, opts ...grpc.CallOption) (*GenerateSuggestionsResponse, error)
	// 智能问答
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	// 知识检索
	RetrieveKnowledge(ctx context.Context, in *RetrieveKnowledgeRequest, opts ...grpc.CallOption) (*RetrieveKnowledgeResponse, error)
	// 健康检查
	Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error)
}

type aIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIServiceClient(cc grpc.ClientConnInterface) AIServiceClient {
	return &aIServiceClient{cc}
}

func (c *aIServiceClient) AnalyzeResume(ctx context.Context, in *AnalyzeResumeRequest, opts ...grpc.CallOption) (*AnalyzeResumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeResumeResponse)
	err := c.cc.Invoke(ctx, AIService_AnalyzeResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) GenerateSuggestions(ctx context.Context, in *GenerateSuggestionsRequest, opts ...grpc.CallOption) (*GenerateSuggestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateSuggestionsResponse)
	err := c.cc.Invoke(ctx, AIService_GenerateSuggestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, AIService_Chat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) RetrieveKnowledge(ctx context.Context, in *RetrieveKnowledgeRequest, opts ...grpc.CallOption) (*RetrieveKnowledgeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetrieveKnowledgeResponse)
	err := c.cc.Invoke(ctx, AIService_RetrieveKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) Health(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, AIService_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIServiceServer is the server API for AIService service.
// All implementations must embed UnimplementedAIServiceServer
// for forward compatibility.
//
// AI服务接口
type AIServiceServer interface {
	// 分析简历
	AnalyzeResume(context.Context, *AnalyzeResumeRequest) (*AnalyzeResumeResponse, error)
	// 生成优化建议
	GenerateSuggestions(context.Context, *GenerateSuggestionsRequest) (*GenerateSuggestionsResponse, error)
	// 智能问答
	Chat(context.Context, *ChatRequest) (*ChatResponse, error)
	// 知识检索
	RetrieveKnowledge(context.Context, *RetrieveKnowledgeRequest) (*RetrieveKnowledgeResponse, error)
	// 健康检查
	Health(context.Context, *emptypb.Empty) (*HealthResponse, error)
	mustEmbedUnimplementedAIServiceServer()
}

// UnimplementedAIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIServiceServer struct{}

func (UnimplementedAIServiceServer) AnalyzeResume(context.Context, *AnalyzeResumeRequest) (*AnalyzeResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeResume not implemented")
}
func (UnimplementedAIServiceServer) GenerateSuggestions(context.Context, *GenerateSuggestionsRequest) (*GenerateSuggestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSuggestions not implemented")
}
func (UnimplementedAIServiceServer) Chat(context.Context, *ChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedAIServiceServer) RetrieveKnowledge(context.Context, *RetrieveKnowledgeRequest) (*RetrieveKnowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveKnowledge not implemented")
}
func (UnimplementedAIServiceServer) Health(context.Context, *emptypb.Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedAIServiceServer) mustEmbedUnimplementedAIServiceServer() {}
func (UnimplementedAIServiceServer) testEmbeddedByValue()                   {}

// UnsafeAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIServiceServer will
// result in compilation errors.
type UnsafeAIServiceServer interface {
	mustEmbedUnimplementedAIServiceServer()
}

func RegisterAIServiceServer(s grpc.ServiceRegistrar, srv AIServiceServer) {
	// If the following call pancis, it indicates UnimplementedAIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIService_ServiceDesc, srv)
}

func _AIService_AnalyzeResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).AnalyzeResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_AnalyzeResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).AnalyzeResume(ctx, req.(*AnalyzeResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_GenerateSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GenerateSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GenerateSuggestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GenerateSuggestions(ctx, req.(*GenerateSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).Chat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_RetrieveKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).RetrieveKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_RetrieveKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).RetrieveKnowledge(ctx, req.(*RetrieveKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).Health(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AIService_ServiceDesc is the grpc.ServiceDesc for AIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai.v1.AIService",
	HandlerType: (*AIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzeResume",
			Handler:    _AIService_AnalyzeResume_Handler,
		},
		{
			MethodName: "GenerateSuggestions",
			Handler:    _AIService_GenerateSuggestions_Handler,
		},
		{
			MethodName: "Chat",
			Handler:    _AIService_Chat_Handler,
		},
		{
			MethodName: "RetrieveKnowledge",
			Handler:    _AIService_RetrieveKnowledge_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _AIService_Health_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ai/v1/ai.proto",
}
