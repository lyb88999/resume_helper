// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 文件不存在
func IsFileNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FILE_NOT_FOUND.String() && e.Code == 404
}

// 文件不存在
func ErrorFileNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_FILE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 文件格式不支持
func IsFileFormatNotSupported(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FILE_FORMAT_NOT_SUPPORTED.String() && e.Code == 400
}

// 文件格式不支持
func ErrorFileFormatNotSupported(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_FILE_FORMAT_NOT_SUPPORTED.String(), fmt.Sprintf(format, args...))
}

// 文件大小超限
func IsFileSizeExceeded(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FILE_SIZE_EXCEEDED.String() && e.Code == 400
}

// 文件大小超限
func ErrorFileSizeExceeded(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_FILE_SIZE_EXCEEDED.String(), fmt.Sprintf(format, args...))
}

// 文件上传失败
func IsFileUploadFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FILE_UPLOAD_FAILED.String() && e.Code == 500
}

// 文件上传失败
func ErrorFileUploadFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FILE_UPLOAD_FAILED.String(), fmt.Sprintf(format, args...))
}

// 文件下载失败
func IsFileDownloadFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_FILE_DOWNLOAD_FAILED.String() && e.Code == 500
}

// 文件下载失败
func ErrorFileDownloadFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_FILE_DOWNLOAD_FAILED.String(), fmt.Sprintf(format, args...))
}

// 权限不足
func IsPermissionDenied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_PERMISSION_DENIED.String() && e.Code == 403
}

// 权限不足
func ErrorPermissionDenied(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_PERMISSION_DENIED.String(), fmt.Sprintf(format, args...))
}

// 存储空间不足
func IsStorageQuotaExceeded(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_STORAGE_QUOTA_EXCEEDED.String() && e.Code == 400
}

// 存储空间不足
func ErrorStorageQuotaExceeded(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_STORAGE_QUOTA_EXCEEDED.String(), fmt.Sprintf(format, args...))
}
