// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.27.3
// source: file/v1/file.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFileServiceDeleteFile = "/api.file.v1.FileService/DeleteFile"
const OperationFileServiceDownloadFile = "/api.file.v1.FileService/DownloadFile"
const OperationFileServiceGetFile = "/api.file.v1.FileService/GetFile"
const OperationFileServiceListFiles = "/api.file.v1.FileService/ListFiles"
const OperationFileServiceUpload = "/api.file.v1.FileService/Upload"

type FileServiceHTTPServer interface {
	// DeleteFile 删除文件
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileReply, error)
	// DownloadFile 下载文件
	DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileReply, error)
	// GetFile 获取文件详情
	GetFile(context.Context, *GetFileRequest) (*GetFileReply, error)
	// ListFiles 获取文件列表
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesReply, error)
	// Upload 上传文件
	Upload(context.Context, *UploadRequest) (*UploadReply, error)
}

func RegisterFileServiceHTTPServer(s *http.Server, srv FileServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/files/upload", _FileService_Upload0_HTTP_Handler(srv))
	r.GET("/api/v1/files", _FileService_ListFiles0_HTTP_Handler(srv))
	r.GET("/api/v1/files/{file_id}", _FileService_GetFile0_HTTP_Handler(srv))
	r.GET("/api/v1/files/{file_id}/download", _FileService_DownloadFile0_HTTP_Handler(srv))
	r.DELETE("/api/v1/files/{file_id}", _FileService_DeleteFile0_HTTP_Handler(srv))
}

func _FileService_Upload0_HTTP_Handler(srv FileServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileServiceUpload)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Upload(ctx, req.(*UploadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadReply)
		return ctx.Result(200, reply)
	}
}

func _FileService_ListFiles0_HTTP_Handler(srv FileServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFilesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileServiceListFiles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFiles(ctx, req.(*ListFilesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFilesReply)
		return ctx.Result(200, reply)
	}
}

func _FileService_GetFile0_HTTP_Handler(srv FileServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileServiceGetFile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFile(ctx, req.(*GetFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFileReply)
		return ctx.Result(200, reply)
	}
}

func _FileService_DownloadFile0_HTTP_Handler(srv FileServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DownloadFileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileServiceDownloadFile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DownloadFile(ctx, req.(*DownloadFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DownloadFileReply)
		return ctx.Result(200, reply)
	}
}

func _FileService_DeleteFile0_HTTP_Handler(srv FileServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteFileRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFileServiceDeleteFile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteFile(ctx, req.(*DeleteFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteFileReply)
		return ctx.Result(200, reply)
	}
}

type FileServiceHTTPClient interface {
	DeleteFile(ctx context.Context, req *DeleteFileRequest, opts ...http.CallOption) (rsp *DeleteFileReply, err error)
	DownloadFile(ctx context.Context, req *DownloadFileRequest, opts ...http.CallOption) (rsp *DownloadFileReply, err error)
	GetFile(ctx context.Context, req *GetFileRequest, opts ...http.CallOption) (rsp *GetFileReply, err error)
	ListFiles(ctx context.Context, req *ListFilesRequest, opts ...http.CallOption) (rsp *ListFilesReply, err error)
	Upload(ctx context.Context, req *UploadRequest, opts ...http.CallOption) (rsp *UploadReply, err error)
}

type FileServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewFileServiceHTTPClient(client *http.Client) FileServiceHTTPClient {
	return &FileServiceHTTPClientImpl{client}
}

func (c *FileServiceHTTPClientImpl) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...http.CallOption) (*DeleteFileReply, error) {
	var out DeleteFileReply
	pattern := "/api/v1/files/{file_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFileServiceDeleteFile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FileServiceHTTPClientImpl) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...http.CallOption) (*DownloadFileReply, error) {
	var out DownloadFileReply
	pattern := "/api/v1/files/{file_id}/download"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFileServiceDownloadFile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FileServiceHTTPClientImpl) GetFile(ctx context.Context, in *GetFileRequest, opts ...http.CallOption) (*GetFileReply, error) {
	var out GetFileReply
	pattern := "/api/v1/files/{file_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFileServiceGetFile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FileServiceHTTPClientImpl) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...http.CallOption) (*ListFilesReply, error) {
	var out ListFilesReply
	pattern := "/api/v1/files"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFileServiceListFiles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FileServiceHTTPClientImpl) Upload(ctx context.Context, in *UploadRequest, opts ...http.CallOption) (*UploadReply, error) {
	var out UploadReply
	pattern := "/api/v1/files/upload"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFileServiceUpload))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
